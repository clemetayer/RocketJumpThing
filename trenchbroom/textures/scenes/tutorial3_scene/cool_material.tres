[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform vec4 back_color  : hint_color;
uniform vec4 window_color : hint_color;
const vec2 uv1_scale = vec2(1.0/15.0);
const float window_size = 0.6;
const float intensity = 4.0;
const float ss_e = 0.33;
const float metallic = 0.75;
const float roughness = 0.5;
const float specular = 0.5;

float random (vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) * 43758.5453123);
}


float square(vec2 uv)
{
	uv = uv * 2.0 - 1.0;
	
	vec2 abs_uv = abs(uv.xy);
	float square = step(window_size/2.0, max(abs_uv.x, abs_uv.y));
	return 1.0 - square;
}


void vertex(){
	UV *= uv1_scale;
}

void fragment(){
	vec2 uv = fract(UV * 10.0);
	float window = square(uv);
	if(window > 0.0){
		ALBEDO = window_color.rgb * window;
		EMISSION = ALBEDO * intensity;
	}
	else{
		ALBEDO = back_color.rgb;
		METALLIC = metallic;
		ROUGHNESS = roughness;
		SPECULAR = specular;
	}
}"

[resource]
shader = SubResource( 1 )
shader_param/back_color = Color( 0.176471, 0.156863, 0, 1 )
shader_param/window_color = Color( 0.145098, 0.682353, 0.501961, 1 )
