[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=3]
code = "// heavily inspired from https://godotshaders.com/shader/speedlines/
shader_type spatial;

const vec2 uv1_scale = vec2(0.2,0.2);

uniform sampler2D noise;
uniform vec4 material_color: hint_color;
uniform vec4 line_color_a: hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 line_color_b: hint_color = vec4(0.0, 1.0, 1.0, 1.0);
uniform float line_threshold = 0.6;
uniform float inverse_speed = 10.0;
uniform float line_length = 1000.0;
uniform float angle: hint_range(0.0, 360.0) = 0.0;
uniform float intensity: hint_range(0.0,16.0) = 4.0;


void vertex(){
	UV *= uv1_scale;
}

void fragment() {
	vec2 uv = vec2(UV.x * cos(radians(angle)) - UV.y * sin(radians(angle)), UV.x * sin(radians(angle)) + UV.y * cos(radians(angle)));
	vec4 noise_line = texture(noise, vec2(uv.x / line_length + TIME / inverse_speed, uv.y));
	if (noise_line.r < line_threshold){
		ALPHA = material_color.a;
		ALBEDO = material_color.rgb;
	} else {
		if(noise_line.g <= 0.72){
			ALBEDO = line_color_a.rgb;
		}
		else{
			ALBEDO = line_color_b.rgb;
		}
		EMISSION = ALBEDO * intensity;
	}
}"

[sub_resource type="OpenSimplexNoise" id=1]

[sub_resource type="NoiseTexture" id=2]
noise = SubResource( 1 )

[resource]
shader = SubResource( 3 )
shader_param/material_color = Color( 0.027451, 0.443137, 0.188235, 0.392157 )
shader_param/line_color_a = Color( 0.0588235, 0.890196, 0.380392, 1 )
shader_param/line_color_b = Color( 0.529412, 0.945098, 0.686275, 1 )
shader_param/line_threshold = 0.68
shader_param/inverse_speed = 10.0
shader_param/line_length = 80.0
shader_param/angle = 180.0
shader_param/intensity = 5.0
shader_param/noise = SubResource( 2 )
