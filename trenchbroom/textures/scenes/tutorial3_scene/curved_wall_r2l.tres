[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[ext_resource path="res://trenchbroom/textures/common/common_textures/base_wall/base_wall_albedo.png" type="Texture" id=1]
[ext_resource path="res://trenchbroom/textures/common/common_textures/base_wall/base_wall_orm.png" type="Texture" id=2]
[ext_resource path="res://trenchbroom/textures/common/common_textures/base_wall/base_wall_normal.png" type="Texture" id=3]
[ext_resource path="res://trenchbroom/textures/common/common_textures/base_wall/base_wall_depth.png" type="Texture" id=4]
[ext_resource path="res://trenchbroom/textures/common/common_textures/base_wall/base_wall_emission.png" type="Texture" id=5]

[sub_resource type="Shader" id=1]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.2.stable's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_emission : hint_black_albedo;
uniform vec4 emission : hint_color;
uniform float emission_energy;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform sampler2D texture_ambient_occlusion : hint_white;
uniform vec4 ao_texture_channel;
uniform float ao_light_affect;
uniform sampler2D texture_depth : hint_black;
uniform float depth_scale;
uniform int depth_min_layers;
uniform int depth_max_layers;
uniform vec2 depth_flip;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
// Custom things
uniform float max_size = 0.1;
uniform float ss_e = 0.05; // smoothstep epsilon
uniform int number_of_squares = 5;
uniform float max_velocity = 2.0;
uniform float min_velocity = 0.1;
uniform vec2 direction = vec2(1.0,0.0); // will just work on left-right OR up-down (no diagonal direction)
uniform vec4 back_color : hint_color;
uniform vec4 color_1 : hint_color;
uniform vec4 color_2 : hint_color;
uniform float intensity = 1.0;
uniform float size_divider = 0.1;

float random (vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) * 43758.5453123);
}

float smoothstep_interval(float point, float pos_1, float pos_2){
	return smoothstep(pos_1 - ss_e, pos_1 + ss_e, point) - smoothstep(pos_2 - ss_e, pos_2 + ss_e, point);
}

vec4 square_stroke(vec2 uv, float rand, vec2 pos)
{
	float square = smoothstep_interval(uv.x, pos.x, pos.x + max_size) * smoothstep_interval(uv.y, pos.y, pos.y + max_size);
	if(pos.x + max_size >= 1.0){
		square += smoothstep_interval(uv.x, 0.0, mod(pos.x + max_size,1.0)) * smoothstep_interval(uv.y, pos.y, pos.y + max_size);
	}
	if(pos.y + max_size >= 1.0){
		square += smoothstep_interval(uv.x, pos.x, pos.x + max_size) * smoothstep_interval(uv.y, 0.0, mod(pos.y + max_size,1.0));
	}
	return mix(color_1,color_2,rand) * square;
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	// Generated
	vec2 base_uv = UV;
	{
		vec3 view_dir = normalize(normalize(-VERTEX)*mat3(TANGENT*depth_flip.x,-BINORMAL*depth_flip.y,NORMAL));
		float num_layers = mix(float(depth_max_layers),float(depth_min_layers), abs(dot(vec3(0.0, 0.0, 1.0), view_dir)));
		float layer_depth = 1.0 / num_layers;
		float current_layer_depth = 0.0;
		vec2 P = view_dir.xy * depth_scale;
		vec2 delta = P / num_layers;
		vec2 ofs = base_uv;
		float depth = textureLod(texture_depth, ofs, 0.0).r;
		float current_depth = 0.0;
		while(current_depth < depth) {
			ofs -= delta;
			depth = textureLod(texture_depth, ofs, 0.0).r;
			current_depth += layer_depth;
		}
		vec2 prev_ofs = ofs + delta;
		float after_depth  = depth - current_depth;
		float before_depth = textureLod(texture_depth, prev_ofs, 0.0).r - current_depth + layer_depth;
		float weight = after_depth / (after_depth - before_depth);
		ofs = mix(ofs,prev_ofs,weight);
		base_uv=ofs;
	}
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
	AO = dot(texture(texture_ambient_occlusion,base_uv),ao_texture_channel);
	AO_LIGHT_AFFECT = ao_light_affect;
	// Custom things
	vec2 uv = fract(UV * vec2(3.0,2.0) * size_divider);
	vec4 color = vec4(0.0);
	for(int i = 0; i < number_of_squares; i++){
		float rand_pos = random(vec2(float(i)/float(number_of_squares)));
		float rand_vel = max(min_velocity,random(vec2(0.0,float(i)/float(number_of_squares))) * max_velocity);
		vec2 pos = vec2(0.0);
		if(direction.x != 0.0){
			pos.x = mod(TIME * rand_vel * direction.x, 1.0);
			pos.y = rand_pos;
		}
		else if(direction.y != 0.0){
			pos.x = rand_pos;
			pos.y = mod(TIME * rand_vel * direction.y, 1.0);
		}
		vec4 square = square_stroke(uv,rand_pos, pos);
		color += square;
		EMISSION += color.rgb * intensity;
	}
	ALBEDO += color.rgb;
}
"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.5
shader_param/roughness = 0.4
shader_param/point_size = 1.0
shader_param/roughness_texture_channel = Plane( 0, 1, 0, 0 )
shader_param/emission = Color( 0, 0, 0, 1 )
shader_param/emission_energy = 0.0
shader_param/normal_scale = 0.125
shader_param/ao_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/ao_light_affect = 0.0
shader_param/depth_scale = 0.0025
shader_param/depth_min_layers = 8
shader_param/depth_max_layers = 32
shader_param/depth_flip = Vector2( 1, 1 )
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/max_size = 0.075
shader_param/ss_e = 0.01
shader_param/number_of_squares = 5
shader_param/max_velocity = 1.5
shader_param/min_velocity = 0.1
shader_param/direction = Vector2( -1, 0 )
shader_param/back_color = null
shader_param/color_1 = Color( 0.0588235, 0.890196, 0.380392, 1 )
shader_param/color_2 = Color( 0.0588235, 0.890196, 0.878431, 1 )
shader_param/intensity = 1.0
shader_param/size_divider = 0.5
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_roughness = ExtResource( 2 )
shader_param/texture_emission = ExtResource( 5 )
shader_param/texture_normal = ExtResource( 3 )
shader_param/texture_ambient_occlusion = ExtResource( 2 )
shader_param/texture_depth = ExtResource( 4 )
