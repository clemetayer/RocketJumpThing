[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

const float metallic = 0.75;
const float roughness = 0.5;
const float specular = 0.5;
const vec2 uv1_scale = vec2(1.0/25.0);

uniform float max_size = 0.1;
uniform float ss_e = 0.0; // smoothstep epsilon
uniform int number_of_squares = 10;
uniform vec4 back_color : hint_color;
uniform vec4 color_1 : hint_color;
uniform vec4 color_2 : hint_color;

float random (vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) * 43758.5453123);
}

vec4 square_stroke(vec2 uv, vec2 pos, float fade, float size, float rand)
{
	float square = smoothstep(pos.x - ss_e, pos.x + ss_e, uv.x) 
		* smoothstep(uv.x - ss_e, uv.x + ss_e, pos.x + size) 
		* smoothstep(pos.y - ss_e, pos.y + ss_e, uv.y) 
		* smoothstep(uv.y - ss_e, uv.y + ss_e, pos.y + size);
	vec4 col = mix(color_1,color_2,rand) * square;
	col.a = fade;
	return col;
}

void vertex(){
	UV = UV * uv1_scale;
}

void fragment(){
	float emission_val = 0.0;
	vec2 uv = UV;
	uv.x = fract(uv.x * 3.0);
	uv.y = fract(uv.y * 2.0);
	vec4 color = back_color;
	for(int i = 0; i < number_of_squares; i++){
		float rand_x = random(vec2(float(i)/float(number_of_squares)));
		float rand_y = random(vec2(float(i)/float(number_of_squares),0.0));
		float rand_size = random(vec2(float(i)/float(number_of_squares))) * max_size;
		float rand_fade_sin_offset = random(vec2(0.0,float(i)/float(number_of_squares))) * 50.0;
		vec2 pos = vec2(rand_x, rand_y);
		float fade_amount = (sin(TIME * 2.0 + rand_fade_sin_offset) / 2.0) + 0.5;
		vec4 square = square_stroke(uv,pos,fade_amount/3.0,rand_size,random(vec2(float(i),3.0)));
		if(square.rgb == vec3(0)){
			METALLIC = metallic;
			ROUGHNESS = roughness;
			SPECULAR = specular;
		}
		else{
			color.rgb += square.rgb * square.a;
			EMISSION = square.rgb * 20.0 * square.a;
		}
	}
	ALBEDO = color.rgb;
}
"

[resource]
shader = SubResource( 1 )
shader_param/max_size = 0.04
shader_param/ss_e = 0.004
shader_param/number_of_squares = 60
shader_param/back_color = Color( 0.176471, 0.176471, 0.176471, 1 )
shader_param/color_1 = Color( 1, 0, 1, 1 )
shader_param/color_2 = Color( 0, 1, 1, 1 )
