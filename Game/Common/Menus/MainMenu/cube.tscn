[gd_scene load_steps=15 format=2]

[ext_resource path="res://trenchbroom/textures/entities/MainMenuCube/light.tres" type="Material" id=1]
[ext_resource path="res://Game/Common/Menus/MainMenu/cube.gd" type="Script" id=2]
[ext_resource path="res://Game/Common/Menus/MainMenu/face.tscn" type="PackedScene" id=3]

[sub_resource type="CubeMesh" id=9]

[sub_resource type="QuadMesh" id=5]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;

uniform vec4 back_color : hint_color = vec4(0,0,0,1.0);
uniform sampler2D color_gradient;

const float FRACT_DIVIDER = 5.0;
const float SQUARE_SIZE = 0.75;
const float SQUARE_CORNER_RADIUS = 0.75;
const float PI = 3.1415;

float random (vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) * 43758.5453123);
}

float square_rounded(vec2 uv, float width, float radius){
	uv = uv * 2.0 - 1.0;
	
	radius *= width; // make radius go from 0-1 instead of 0-width
	vec2 abs_uv = abs(uv.xy) - radius;
	vec2 dist = vec2(max(abs_uv.xy, 0.0));
	float square = step(width - radius, length(dist));
	return square;
}

float smooth_appear_square(vec2 uv, float time){
	return sin(random(uv) * 2.0 *  PI + time)/2.0 + 0.5;
}

vec2 round_uv(vec2 uv, float fract_divider) {
	return round(uv * fract_divider + 0.5) / fract_divider;
}

void fragment(){
	vec2 fract_uv = fract(UV * FRACT_DIVIDER);
	if(square_rounded(fract_uv,SQUARE_SIZE,SQUARE_CORNER_RADIUS) == 0.0){
		vec4 color = texture(color_gradient,UV);
		float smooth_appear = smooth_appear_square(round_uv(UV,FRACT_DIVIDER), TIME);
		vec4 mixed_color = mix(back_color,color,smooth_appear);
		ALBEDO = mixed_color.rgb;
		ALPHA = mixed_color.a;
	}
	else{
		ALBEDO = back_color.rgb;
		ALPHA = back_color.a;
	}
	EMISSION = ALBEDO;
}
"

[sub_resource type="Gradient" id=12]
colors = PoolColorArray( 0, 0.85098, 1, 1, 0, 1, 0.227451, 1 )

[sub_resource type="GradientTexture" id=13]
gradient = SubResource( 12 )

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 2 )
shader_param/back_color = Color( 0, 0, 0, 1 )
shader_param/color_gradient = SubResource( 13 )

[sub_resource type="QuadMesh" id=6]

[sub_resource type="QuadMesh" id=7]

[sub_resource type="QuadMesh" id=8]

[sub_resource type="QuadMesh" id=11]

[sub_resource type="QuadMesh" id=10]

[node name="Cube" type="Spatial"]
script = ExtResource( 2 )

[node name="LightBorder" type="MeshInstance" parent="."]
mesh = SubResource( 9 )
material/0 = ExtResource( 1 )

[node name="CubeFaces" type="Spatial" parent="."]

[node name="Front" parent="CubeFaces" instance=ExtResource( 3 )]
transform = Transform( 1.9, 0, 0, 0, 1.9, 0, 0, 0, 1, 0, 0, 1.001 )
mesh = SubResource( 5 )
material/0 = SubResource( 4 )

[node name="Back" parent="CubeFaces" instance=ExtResource( 3 )]
transform = Transform( -1.9, 0, -8.74228e-08, 0, 1.9, 0, 1.66103e-07, 0, -1, 0, 0, -1.001 )
mesh = SubResource( 6 )
material/0 = SubResource( 4 )

[node name="Up" parent="CubeFaces" instance=ExtResource( 3 )]
transform = Transform( 1.9, 0, 0, 0, -8.30516e-08, 1, 0, -1.9, -4.37114e-08, 0, 1.001, 0 )
mesh = SubResource( 7 )
material/0 = SubResource( 4 )

[node name="Down" parent="CubeFaces" instance=ExtResource( 3 )]
transform = Transform( 1.9, 0, 0, 0, -8.30516e-08, -1, 0, 1.9, -4.37114e-08, 0, -1.001, 0 )
mesh = SubResource( 8 )
material/0 = SubResource( 4 )

[node name="Left" parent="CubeFaces" instance=ExtResource( 3 )]
transform = Transform( -8.30516e-08, 0, -1, 0, 1.9, 0, 1.9, 0, -4.37114e-08, -1.001, 0, 0 )
mesh = SubResource( 11 )
material/0 = SubResource( 4 )

[node name="Right" parent="CubeFaces" instance=ExtResource( 3 )]
transform = Transform( -8.30516e-08, 0, 1, 0, 1.9, 0, -1.9, 0, -4.37114e-08, 1.001, 0, 0 )
mesh = SubResource( 10 )
material/0 = SubResource( 4 )
