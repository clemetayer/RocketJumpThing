[gd_resource type="SphereMesh" load_steps=5 format=2]

[sub_resource type="Shader" id=16]
code = "shader_type spatial;

const vec2 NOISE_TRESHOLD = vec2(0.25,0.265);
const float EMISSION_VAL = 2.0;

uniform sampler2D noise;
uniform vec4 col_1 : hint_color;
uniform vec4 col_2 : hint_color;
uniform float speed = 0.75;

void fragment(){
	vec4 noise_merge = texture(noise,mod(UV + vec2(0.0,TIME * speed),vec2(1.0))) * texture(noise,mod(UV,vec2(1.0)));
	if(noise_merge.g > NOISE_TRESHOLD.x && noise_merge.g < NOISE_TRESHOLD.y){
		float amount = abs(UV.x - 0.5)*2.0;
		ALBEDO = mix(col_1,col_2,amount).rgb;
		EMISSION = ALBEDO * EMISSION_VAL;
	}
	else {
		ALPHA = 0.0;
		ALBEDO = vec3(0.0);
	}
}"

[sub_resource type="OpenSimplexNoise" id=17]
period = 17.0
persistence = 0.0

[sub_resource type="NoiseTexture" id=18]
width = 128
height = 128
seamless = true
noise = SubResource( 17 )

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 16 )
shader_param/col_1 = Color( 0, 1, 0.219608, 1 )
shader_param/col_2 = Color( 0, 0.0941176, 1, 1 )
shader_param/speed = 0.75
shader_param/noise = SubResource( 18 )

[resource]
material = SubResource( 10 )
